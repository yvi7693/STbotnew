import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, PreCheckoutQuery, LabeledPrice, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, WebAppInfo
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder

from pydantic import BaseModel

import settings
from split_client import SplitClient

import math
import json
import uuid
import httpx

# –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
# (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ —Ä–∞–∑–Ω–µ—Å–∏—Ç–µ –ø–æ –ø–∞–ø–∫–∞–º)

class Store(BaseModel):
    user_price_per_star_rub: float = float(getattr(settings, "USER_PRICE_PER_STAR_RUB", 3.50))
    cost_per_star_rub: float = float(getattr(settings, "COST_PER_STAR_RUB", 3.10))

store = Store()
store.user_price_per_star_rub = 1.5

pending_qty: dict[int, int] = {}
ask_custom: dict[int, bool] = {}
rub_balance: dict[int, int] = {}  # –±–∞–ª–∞–Ω—Å –≤ –∫–æ–ø–µ–π–∫–∞—Ö (RUB*100)
# –æ–∂–∏–¥–∞–µ–º—ã–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ Crypto Pay: user_id -> {topup_id, amount_rub, invoice_id}
pending_topups: dict[int, dict] = {}

# —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ ‚ÇΩ
ask_custom_topup: dict[int, bool] = {}

bot = Bot(settings.BOT_TOKEN)
dp = Dispatcher()

# ========= –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ =========

def calc_total_price_rub_kopecks(qty: int) -> int:
    """–¶–µ–Ω–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ –≤ –∫–æ–ø–µ–π–∫–∞—Ö: RUB * 100."""
    price = store.user_price_per_star_rub * qty
    return int(math.floor(price * 100))


def calc_profit_rub(qty: int) -> float:
    return (store.user_price_per_star_rub - store.cost_per_star_rub) * qty


# ========= –ö–æ–º–∞–Ω–¥—ã =========

@dp.message(Command("start"))
async def cmd_start(m: Message):
    kb = InlineKeyboardBuilder()
    kb.button(text="üí∞ –ë–∞–ª–∞–Ω—Å (‚ÇΩ)", callback_data="balance")
    kb.button(text="‚≠ê –ö—É–ø–∏—Ç—å –∑–≤—ë–∑–¥—ã", callback_data="buy_menu")
    kb.adjust(2)

    text = (
        "–ü—Ä–∏–≤–µ—Ç! –ó–¥–µ—Å—å –º—ã –Ω–∞—É—á–∏–º –∏ —Ä–∞—Å—Å–∫–∞–∂–µ–º, –∫–∞–∫ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –≤ —Ä—É–±–ª—è—Ö –∏ –∫—É–ø–∏—Ç—å ‚≠ê Telegram Stars.\n\n"
        f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {store.user_price_per_star_rub:.2f} ‚ÇΩ –∑–∞ 1 ‚≠ê"
    )
    await m.answer(text, reply_markup=kb.as_markup())


@dp.callback_query(F.data == "balance")
async def cb_balance(cq: CallbackQuery):
    await cq.answer()
    balance_kopecks = rub_balance.get(cq.from_user.id, 0)
    balance_rub = balance_kopecks / 100
    kb = InlineKeyboardBuilder()
    for amt in [300, 500, 1000, 2500, 5000]:
        kb.button(text=f"–ü–æ–ø–æ–ª–Ω–∏—Ç—å +{amt} ‚ÇΩ", callback_data=f"topup_amount:{amt}")
    kb.button(text="–î—Ä—É–≥–∞—è —Å—É–º–º–∞ (‚ÇΩ)", callback_data="topup_custom")
    if pending_topups.get(cq.from_user.id):
        kb.button(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data="check_crypto")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu")
    kb.adjust(2)
    await cq.message.edit_text(f"–í–∞—à –±–∞–ª–∞–Ω—Å: {balance_rub:.2f} ‚ÇΩ", reply_markup=kb.as_markup())


@dp.callback_query(F.data.startswith("topup_amount:"))
async def cb_topup_amount(cq: CallbackQuery):
    await cq.answer()
    amt_rub = int(cq.data.split(":")[1])
    # –°–æ—Ö—Ä–∞–Ω–∏–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—É–º–º—É –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    pending_qty[cq.from_user.id] = amt_rub  # –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
    kb = InlineKeyboardBuilder()
    kb.button(text="üí≥ –°–ë–ü", callback_data="pay_sbp")
    kb.button(text="üåê TONCOIN [CryptoBot]", callback_data="pay_ton")
    kb.button(text="üåê USDT [CryptoBot]", callback_data="pay_usdt")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="balance")
    kb.adjust(1)
    await cq.message.edit_text(
        f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ {amt_rub} ‚ÇΩ ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
        reply_markup=kb.as_markup(),
    )


@dp.callback_query(F.data == "topup_custom")
async def cb_topup_custom(cq: CallbackQuery):
    await cq.answer()
    ask_custom_topup[cq.from_user.id] = True
    await cq.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ä—É–±–ª—è—Ö (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ). –ú–∏–Ω–∏–º—É–º 10, –º–∞–∫—Å–∏–º—É–º 100000.\n–ù–∞–ø—Ä–∏–º–µ—Ä: 750"
    )


def _payment_instructions_text(method: str, amt_rub: int) -> str:
    if method == "sbp":
        return f"–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {amt_rub} ‚ÇΩ\n\n{settings.SBP_INSTRUCTION}"
    if method == "ton":
        return f"–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {amt_rub} ‚ÇΩ\n–ü–µ—Ä–µ–π–¥–∏—Ç–µ: {settings.CRYPTO_TON_LINK}"
    if method == "usdt":
        return f"–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {amt_rub} ‚ÇΩ\n–ü–µ—Ä–µ–π–¥–∏—Ç–µ: {settings.CRYPTO_USDT_LINK}"
    return "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"

@dp.callback_query(F.data.in_({"pay_sbp", "pay_ton", "pay_usdt"}))
async def cb_pay_method(cq: CallbackQuery):
    await cq.answer()
    amt_rub = int(pending_qty.get(cq.from_user.id, 0) or 0)
    method = "sbp" if cq.data == "pay_sbp" else ("ton" if cq.data == "pay_ton" else "usdt")

    # TON / USDT ‚Äî —Å–æ–∑–¥–∞—ë–º –∏–Ω–≤–æ–π—Å –≤ Crypto Pay –Ω–∞ RUB (fiat) —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –Ω–∞ –∞–∫—Ç–∏–≤
    if method in {"ton", "usdt"}:
        asset = "TON" if method == "ton" else "USDT"
        payload = {
            "type": "topup",
            "user_id": cq.from_user.id,
            "topup_id": str(uuid.uuid4()),
            "amount_rub": amt_rub,
        }
        body = {
            "currency_type": "fiat",
            "fiat": "RUB",
            "amount": str(amt_rub),
            "accepted_assets": asset,
            "description": f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ {amt_rub} ‚ÇΩ –¥–ª—è user {cq.from_user.id}",
            "payload": json.dumps(payload),
            "allow_anonymous": True,
            "allow_comments": False,
            "expires_in": 1800,
        }
        headers = {
            "Crypto-Pay-API-Token": settings.CRYPTOPAY_API_TOKEN,
            "Content-Type": "application/json",
        }
        try:
            async with httpx.AsyncClient(timeout=20) as client:
                r = await client.post(f"{settings.CRYPTOPAY_API_URL}/createInvoice", headers=headers, json=body)
                r.raise_for_status()
                data = r.json()
            if not data.get("ok"):
                await cq.message.edit_text(f"–û—à–∏–±–∫–∞ Crypto Pay: {data.get('error','unknown')}")
                return
            inv = data.get("result", {})
            url = inv.get("mini_app_invoice_url") or inv.get("bot_invoice_url") or inv.get("pay_url")
            if not url or not isinstance(url, str) or not url.startswith("http"):
                await cq.message.edit_text("Crypto Pay –≤–µ—Ä–Ω—É–ª —Å—á—ë—Ç –±–µ–∑ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å—Å—ã–ª–∫–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return
            invoice_id = inv.get("invoice_id")
            pending_topups[cq.from_user.id] = {"topup_id": payload["topup_id"], "amount_rub": amt_rub, "invoice_id": invoice_id}
            kb = InlineKeyboardBuilder()
            # –í–ê–ñ–ù–û: bot_invoice_url ‚Äî —ç—Ç–æ t.me deep link –¥–ª—è mini-app; –µ–≥–æ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –∫–∞–∫ –æ–±—ã—á–Ω—ã–π URL-–∫–Ω–æ–ø–∫–∏,
            # –∞ –Ω–µ –∫–∞–∫ web_app, –∏–Ω–∞—á–µ Telegram –≤–µ—Ä–Ω—ë—Ç BUTTON_URL_INVALID
            kb.button(text="–û–ø–ª–∞—Ç–∏—Ç—å –≤ Crypto Bot (mini-app)", url=url)
            kb.button(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data="check_crypto")
            kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="balance")
            kb.adjust(1)
            await cq.message.edit_text(
                f"–í—ã—Å—Ç–∞–≤–ª–µ–Ω —Å—á—ë—Ç –≤ Crypto Bot –Ω–∞ {amt_rub} ‚ÇΩ (–∞–∫—Ç–∏–≤: {asset}). –û—Ç–∫—Ä–æ–µ—Ç—Å—è –º–∏–Ω–∏‚Äë–∞–ø–ø CryptoBot.",
                reply_markup=kb.as_markup(),
            )
            return
        except Exception as e:
            await cq.message.edit_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—á—ë—Ç –≤ Crypto Pay: {e}")
            return

    # –°–ë–ü ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é (–±–µ–∑ API), –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ –ø–æ –∫–Ω–æ–ø–∫–µ ¬´–Ø –æ–ø–ª–∞—Ç–∏–ª¬ª
    kb = InlineKeyboardBuilder()
    kb.button(text="–Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"paid:{method}")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="balance")
    kb.adjust(1)
    await cq.message.edit_text(_payment_instructions_text(method, amt_rub), reply_markup=kb.as_markup())


@dp.callback_query(F.data == "check_crypto")
async def cb_check_crypto(cq: CallbackQuery):
    await cq.answer()
    topup = pending_topups.get(cq.from_user.id)
    if not topup:
        await cq.message.edit_text("–ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")
        return

    headers = {"Crypto-Pay-API-Token": settings.CRYPTOPAY_API_TOKEN}
    params = {"status": "paid", "fiat": "RUB"}
    try:
        async with httpx.AsyncClient(timeout=20) as client:
            r = await client.get(f"{settings.CRYPTOPAY_API_URL}/getInvoices", headers=headers, params=params)
        if r.status_code != 200:
            await cq.message.edit_text(f"Crypto Pay HTTP {r.status_code}: {r.text}")
            return
        # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON; –µ—Å–ª–∏ –≤–µ—Ä–Ω—É–ª–∞—Å—å —Å—Ç—Ä–æ–∫–∞/HTML ‚Äî –ø–æ–∫–∞–∂–µ–º –∫–∞–∫ –µ—Å—Ç—å
        try:
            data = r.json()
        except Exception:
            await cq.message.edit_text(f"Crypto Pay –≤–µ—Ä–Ω—É–ª –Ω–µ JSON:\n{r.text}")
            return
        if not isinstance(data, dict):
            await cq.message.edit_text(f"Crypto Pay –æ—Ç–≤–µ—Ç–∏–ª –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ:\n{data}")
            return
        if not data.get("ok"):
            err = data.get("error") or data
            await cq.message.edit_text(f"–û—à–∏–±–∫–∞ Crypto Pay: {err}")
            return
        result = data.get("result")
        if isinstance(result, list):
            invoices = result
        elif isinstance(result, dict) and "items" in result:
            invoices = result["items"]
        else:
            await cq.message.edit_text(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç invoices: {result}")
            return
        if not isinstance(invoices, list):
            await cq.message.edit_text(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç invoices: {invoices}")
            return
        found = None
        for inv in invoices:
            p_raw = inv.get("payload")
            if not p_raw:
                continue
            try:
                p = json.loads(p_raw) if isinstance(p_raw, str) else p_raw
            except Exception:
                p = {}
            if p.get("topup_id") == topup.get("topup_id") and int(p.get("user_id", 0)) == cq.from_user.id:
                found = inv
                break
        if not found:
            await cq.message.edit_text("–ü–ª–∞—Ç—ë–∂ –ø–æ–∫–∞ –Ω–µ –≤–∏–¥–µ–Ω –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        # –ó–∞—á–∏—Å–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        amt_rub = int(topup.get("amount_rub", 0))
        rub_balance[cq.from_user.id] = rub_balance.get(cq.from_user.id, 0) + amt_rub * 100
        pending_topups.pop(cq.from_user.id, None)
        balance_rub = rub_balance[cq.from_user.id] / 100
        kb = InlineKeyboardBuilder()
        kb.button(text="‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu")
        kb.adjust(1)
        await cq.message.edit_text(
            f"–û–ø–ª–∞—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ Crypto Bot. –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amt_rub} ‚ÇΩ. –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance_rub:.2f} ‚ÇΩ",
            reply_markup=kb.as_markup(),
        )
    except Exception as e:
        await cq.message.edit_text(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")


@dp.callback_query(F.data == "buy_menu")
async def cb_buy_menu(cq: CallbackQuery):
    await cq.answer()
    kb = InlineKeyboardBuilder()
    for qty in [50, 100, 250, 500, 1000]:
        kb.button(text=f"–ö—É–ø–∏—Ç—å {qty} ‚≠ê", callback_data=f"buy:{qty}")
    kb.button(text="–î—Ä—É–≥–∞—è —Å—É–º–º–∞", callback_data="custom")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu")
    kb.adjust(2)
    await cq.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥ –¥–ª—è –ø–æ–∫—É–ø–∫–∏:", reply_markup=kb.as_markup())


@dp.callback_query(F.data == "menu")
async def cb_menu(cq: CallbackQuery):
    await cq.answer()
    kb = InlineKeyboardBuilder()
    kb.button(text="üí∞ –ë–∞–ª–∞–Ω—Å (‚ÇΩ)", callback_data="balance")
    kb.button(text="‚≠ê –ö—É–ø–∏—Ç—å –∑–≤—ë–∑–¥—ã", callback_data="buy_menu")
    kb.adjust(2)
    await cq.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=kb.as_markup())


@dp.callback_query(F.data.startswith("buy:"))
async def cq_buy(cq: CallbackQuery):
    qty = int(cq.data.split(":")[1])
    await cq.answer()
    pending_qty[cq.from_user.id] = qty
    username = f"@{cq.from_user.username}" if cq.from_user.username else str(cq.from_user.id)
    price_kopecks = calc_total_price_rub_kopecks(qty)
    current_balance = rub_balance.get(cq.from_user.id, 0)
    if current_balance < price_kopecks:
        need = (price_kopecks - current_balance) / 100
        await cq.message.edit_text(
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å {qty} ‚≠ê: {price_kopecks/100:.2f} ‚ÇΩ. –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –µ—â—ë {need:.2f} ‚ÇΩ —á–µ—Ä–µ–∑ –ë–∞–ª–∞–Ω—Å.")
        return

    # —Å–ø–∏—Å—ã–≤–∞–µ–º –∏ –æ—Ñ–æ—Ä–º–ª—è–µ–º –∑–∞–∫–∞–∑
    rub_balance[cq.from_user.id] = current_balance - price_kopecks
    await cq.message.edit_text("–û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞. –û—Ñ–æ—Ä–º–ª—è—é –ø–æ–∫—É–ø–∫—É –Ω–∞ split.tg‚Ä¶")
    try:
        client = SplitClient(
            settings.SPLIT_EMAIL,
            settings.SPLIT_PASSWORD,
            headless=False,    # –ø–æ–∫–∞–∑–∞—Ç—å –æ–∫–Ω–æ –±—Ä–∞—É–∑–µ—Ä–∞
            slow_mo=250,       # –∑–∞–º–µ–¥–ª–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
            record_video=True  # –∑–∞–ø–∏—Å–∞—Ç—å –≤–∏–¥–µ–æ –≤ –ø–∞–ø–∫—É videos/
        )
        order_id = await client.buy_stars(username, qty)
        # –ï—Å–ª–∏ split –≤–µ—Ä–Ω—É–ª —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ CryptoBot, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ—ë –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if isinstance(order_id, str) and order_id.startswith("PAYMENT_LINK::"):
            pay_url = order_id.split("::", 1)[1]
            if pay_url and isinstance(pay_url, str) and pay_url.startswith("http"):
                kb = InlineKeyboardBuilder()
                kb.button(text="–û–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑ –≤ CryptoBot", url=pay_url)
                kb.button(text="‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu")
                kb.adjust(1)
                await cq.message.answer(
                    "–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ CryptoBot (—Å—Å—ã–ª–∫–∞ –Ω–∏–∂–µ). –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã split.tg –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ–∫—É–ø–∫—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.",
                    reply_markup=kb.as_markup(),
                )
            else:
                await cq.message.answer(
                    "–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –æ—Ç split.tg –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")
            return
    except Exception:
        # –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        rub_balance[cq.from_user.id] += price_kopecks
        await cq.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–∫—É–ø–∫—É –Ω–∞ split.tg. –°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å.")
        raise

    await cq.message.answer(
        f"–ì–æ—Ç–æ–≤–æ! –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω.\n–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: {qty} ‚≠ê –Ω–∞ {username}\n–°–ø–∏—Å–∞–Ω–æ: {price_kopecks/100:.2f} ‚ÇΩ\n–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {rub_balance.get(cq.from_user.id,0)/100:.2f} ‚ÇΩ")


@dp.callback_query(F.data == "custom")
async def cq_custom(cq: CallbackQuery):
    await cq.answer()
    ask_custom[cq.from_user.id] = True


@dp.message()
async def handle_text(m: Message):
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª —Å–≤–æ—é —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (‚ÇΩ)
    if ask_custom_topup.get(m.from_user.id) and m.text and m.text.isdigit():
        amt_rub = int(m.text)
        if amt_rub < 10 or amt_rub > 100000:
            await m.answer("–°—É–º–º–∞ –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –æ—Ç 10 –¥–æ 100000 ‚ÇΩ.")
            return
        ask_custom_topup[m.from_user.id] = False
        pending_qty[m.from_user.id] = amt_rub
        kb = InlineKeyboardBuilder()
        kb.button(text="üåê TONCOIN [CryptoBot]", callback_data="pay_ton")
        kb.button(text="üåê USDT [CryptoBot]", callback_data="pay_usdt")
        kb.button(text="üí≥ –°–ë–ü", callback_data="pay_sbp")
        kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="balance")
        kb.adjust(1)
        await m.answer(
            f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ {amt_rub} ‚ÇΩ ‚Äî –≤—ã"
            f"–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
            reply_markup=kb.as_markup(),
        )
        return

    # –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã —Ç–µ–∫—Å—Ç–æ–º (–±—ã—Å—Ç—Ä–æ –∏ –ø—Ä–æ—Å—Ç–æ)
    if m.from_user.id in settings.ADMIN_IDS and m.text:
        if m.text.startswith("/set_price"):
            try:
                store.user_price_per_star_rub = float(m.text.split()[1])
                await m.answer(f"OK. –ù–æ–≤–∞—è —Ü–µ–Ω–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞: {store.user_price_per_star_rub:.2f} ‚ÇΩ –∑–∞ 1 ‚≠ê")
            except Exception:
                await m.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_price 3.50")
            return
        if m.text.startswith("/set_cost"):
            try:
                store.cost_per_star_rub = float(m.text.split()[1])
                await m.answer(f"OK. –ù–æ–≤–∞—è —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å: {store.cost_per_star_rub:.2f} ‚ÇΩ –∑–∞ 1 ‚≠ê")
            except Exception:
                await m.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_cost 3.10")
            return
        if m.text.startswith("/stats"):
            await m.answer("–í —ç—Ç–æ–π –¥–µ–º–æ-–≤–µ—Ä—Å–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ö—Ä–∞–Ω–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ –ª–æ–≥–∞—Ö / –ø–∞–º—è—Ç–∏. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ –ë–î –¥–ª—è –ø—Ä–æ–¥.")
            return

    # –ö–∞—Å—Ç–æ–º–Ω–æ–µ –∫–æ–ª-–≤–æ
    user_ask_custom = ask_custom.get(m.from_user.id)
    if user_ask_custom and m.text and m.text.isdigit():
        qty = max(1, min(5000, int(m.text)))
        ask_custom[m.from_user.id] = False
        pending_qty[m.from_user.id] = qty
        username = f"@{m.from_user.username}" if m.from_user.username else str(m.from_user.id)
        price_kopecks = calc_total_price_rub_kopecks(qty)
        current_balance = rub_balance.get(m.from_user.id, 0)
        if current_balance < price_kopecks:
            need = (price_kopecks - current_balance) / 100
            await m.answer(
                f"–°—Ç–æ–∏–º–æ—Å—Ç—å {qty} ‚≠ê: {price_kopecks/100:.2f} ‚ÇΩ. –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –µ—â—ë {need:.2f} ‚ÇΩ —á–µ—Ä–µ–∑ –ë–∞–ª–∞–Ω—Å.")
            return

        # —Å–ø–∏—Å—ã–≤–∞–µ–º –∏ –æ—Ñ–æ—Ä–º–ª—è–µ–º –∑–∞–∫–∞–∑
        rub_balance[m.from_user.id] = current_balance - price_kopecks
        await m.answer("–û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞. –û—Ñ–æ—Ä–º–ª—è—é –ø–æ–∫—É–ø–∫—É –Ω–∞ split.tg‚Ä¶")
        try:
            client = SplitClient(
                settings.SPLIT_EMAIL,
                settings.SPLIT_PASSWORD,
                headless=False,
                slow_mo=250,
                record_video=True
            )
            order_id = await client.buy_stars(username, qty)
            if isinstance(order_id, str) and order_id.startswith("PAYMENT_LINK::"):
                pay_url = order_id.split("::", 1)[1]
                kb = InlineKeyboardBuilder()
                kb.button(text="–û–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑ –≤ CryptoBot", url=pay_url)
                kb.button(text="‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu")
                kb.adjust(1)
                await m.answer(
                    "–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ CryptoBot (—Å—Å—ã–ª–∫–∞ –Ω–∏–∂–µ). –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã split.tg –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ–∫—É–ø–∫—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.",
                    reply_markup=kb.as_markup(),
                )
                return
        except Exception:
            # –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            rub_balance[m.from_user.id] += price_kopecks
            await m.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–∫—É–ø–∫—É –Ω–∞ split.tg. –°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å.")
            return

        await m.answer(
            f"–ì–æ—Ç–æ–≤–æ! –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω.\n–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: {qty} ‚≠ê –Ω–∞ {username}\n–°–ø–∏—Å–∞–Ω–æ: {price_kopecks/100:.2f} ‚ÇΩ\n–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {rub_balance.get(m.from_user.id,0)/100:.2f} ‚ÇΩ")
        return


@dp.pre_checkout_query()
async def pre_checkout(pcq: PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pcq.id, ok=True)


@dp.message(F.successful_payment)
async def on_paid(m: Message):
    await m.answer("–ü–æ–ª—É—á–µ–Ω –ø–ª–∞—Ç—ë–∂ —á–µ—Ä–µ–∑ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∏–Ω–≤–æ–π—Å—ã, –Ω–æ —Ç–µ–∫—É—â–∞—è –ª–æ–≥–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≤–Ω–µ—à–Ω–∏–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã. –ü–ª–∞—Ç—ë–∂ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.")


if __name__ == "__main__":
    if not settings.BOT_TOKEN:
        raise SystemExit("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω")
    asyncio.run(dp.start_polling(bot))